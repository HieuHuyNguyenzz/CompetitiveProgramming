# Số nguyên tố

## Khái niệm số nguyên tố
Số nguyên tố là só mà chỉ chia hết cho 1 và chính nó. 

Dãy số nguyên tố: 2,3,5,7,...

## Kiểm tra một số có phải số nguyên tố hay không?

Cách kiểm tra một số N có phải số nguyên tố hay không đơn giản nhất đó chính là kiểm tra tính chia hết của số đó cho tất cả các số từ 2,3,..,N-1. Nếu N không chia hết cho số nào trong khoảng này thì N là số nguyên tố. 

Cách làm này có độ phức tạp O(N) cho quá trình kiểm tra.

Cài đặt:
```cpp
...
```

### Tối ưu 1:
Cách tối ưu đầu tiên đó là chỉ kiểm tra tính chia hết trong khoảng [2..$sqrt(N)$].

Điều này là do nếu $a \times b = N$ thì ta giả sử $a <= sqrt(N)$ và $b >= sqrt(N)$. Vì vậy a sẽ nằm trong khoảng g [2..$sqrt(N)] và t sẽ chỉ cần kiểm tra a thì sẽ không cần kiểm tra b nữa.

Tối ưu này giảm độ phức tạp của quá trình kiểm tra xuống chỉ còn O($sqrt(N)$)

Cài đặt:
```cpp
...
```

### Tối ưu 2: 
Ta chỉ cần tìm kiếm số 2 và các số lẻ từ 3 đến $sqrt(N)$.

Do trong các số chắn chỉ có 2 là số nguyên tố nên nếu N không chia hết cho 2 thì N chắc chắn sẽ không chia hết cho các số chắn còn lại trong khoảng từ [2..N].

Độ phức tạp lúc này giảm còn O($sqrt(N/2)$) ~ O($sqrt(N)$)

Cài đặt:
```cpp
...
```

### Kiểm tra nhiều số
Giả sử đề bài không chỉ yêu cầu kiểm tra một số mà cần kiểm tra nhiều số thì ta có độ phức tạp là O($N \times  sqrt(N)$) khi kiểm tra từ 1 đến N. Độ phức tạp này là không tồi tuy nhiên hoàn toàn có thể tốt hơn, đó là phương pháp sử dụng kỹ thuật sàng nguyên tố Eratosthenes (Sieve of Eratosthenes).

Sàng nguyên tố được khởi tạo các số trong khoảng từ 2 đến N là các số nguyên tố sử dụng một mảng. Sau đó nó sẽ duyệt từ 2 đến N, với i thuộc [2..N], nếu i vẫn được đánh dấu là số nguyên tố thì nó sẽ thực hiện đánh dấu lại các bội số của i ngoại trừ i là số không nguyên tố (do nó chia hết cho i).

Kỹ thuật này thực hiện chính xác $N \times (1/2 + 1/3 + ... + 1/ số_nguyên_tố_cuối_cùng_nhỏ_hơn_N) phép tính. Dó đó độ phức tạp của phương pháp này là O($N \times log{log{N}}$) < O($m \times sqrt(N)$)

```cpp 
...
```